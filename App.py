import streamlit as st
import pandas as pd
from datetime import datetime

# Set up language translations
translations = {
    "‡πÑ‡∏ó‡∏¢": {
        "title": "NAB Food Calculator App",
        "registration": "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
        "weight": "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)",
        "height": "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)",
        "age": "‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)",
        "gender": "‡πÄ‡∏û‡∏®",
        "country": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
        "language": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤",
        "activity_level": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "submit": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "welcome": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà!",
        "user_data": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        "bmi": "‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)",
        "tdee": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (TDEE)",
        "choose_meal": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "breakfast": "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤",
        "lunch": "‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô",
        "dinner": "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô",
        "snack": "‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á",
        "add_meal": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "meal_date": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        "meal_name": "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "meal_calories": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà)",
        "meal_image": "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "save_meal": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "saved_meals": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ",
        "no_meal_data": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ",
        "back": "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å",
        "search": "‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "search_results": "‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
    },
    "English": {
        "title": "NAB Food Calculator App",
        "registration": "Registration",
        "weight": "Weight (kg)",
        "height": "Height (cm)",
        "age": "Age (years)",
        "gender": "Gender",
        "country": "Select Country",
        "language": "Select Language",
        "activity_level": "Activity Level",
        "submit": "Submit",
        "welcome": "Welcome to the Calorie Calculator App!",
        "user_data": "Your User Data",
        "bmi": "Body Mass Index (BMI)",
        "tdee": "Total Daily Energy Expenditure (TDEE)",
        "choose_meal": "Choose a Meal",
        "breakfast": "Breakfast",
        "lunch": "Lunch",
        "dinner": "Dinner",
        "snack": "Snack",
        "add_meal": "Add Meal",
        "meal_date": "Select Date",
        "meal_name": "Meal Name",
        "meal_calories": "Choose Calories (kcal)",
        "meal_image": "Upload Meal Image",
        "save_meal": "Save Meal",
        "saved_meals": "Saved Meal Data",
        "no_meal_data": "No saved meal data",
        "back": "Back to Home",
        "search": "Search Food",
        "search_results": "Search Results"
    }
}

# Select language
language = st.selectbox("üåê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ / Select Language", ["‡πÑ‡∏ó‡∏¢", "English"])

# Use the selected language for translations
t = translations[language]

# Sidebar configuration with circular logo
st.sidebar.markdown(
    f"""
    <div style="display: flex; align-items: center;">
        <img src="https://i.imgur.com/d7m4oYk_d.webp?maxwidth=760&fidelity=grand" style="width: 60px; height: 60px; border-radius: 50%; margin-right: 10px;">
        <h2 style="margin: 0;">{t['title']}</h2>
    </div>
    """,
    unsafe_allow_html=True
)

# Dictionary to store meal data
if 'meal_data' not in st.session_state:
    st.session_state.meal_data = {
        t['breakfast']: [],
        t['lunch']: [],
        t['dinner']: [],
        t['snack']: []
    }

# User registration data
if 'user_data' not in st.session_state:
    st.session_state.user_data = {}

# Main application logic
if 'current_page' not in st.session_state:
    st.session_state.current_page = "registration"

# Function for user registration
def registration_page():
    st.title(f"üìã {t['registration']}")
    
    # Use Columns for layout
    col1, col2 = st.columns(2)
    
    with col1:
        weight = st.number_input(f"üèãÔ∏è‚Äç‚ôÇÔ∏è {t['weight']}", min_value=0.0, format="%.2f")
        height = st.number_input(f"üìè {t['height']}", min_value=0.0, format="%.2f")
        age = st.number_input(f"üë∂ {t['age']}", min_value=0, format="%d")
    
    with col2:
        gender = st.selectbox(f"üöª {t['gender']}", ["‡∏ä‡∏≤‡∏¢" if language == "‡πÑ‡∏ó‡∏¢" else "Male", "‡∏´‡∏ç‡∏¥‡∏á" if language == "‡πÑ‡∏ó‡∏¢" else "Female"])
        country = st.selectbox(f"üåç {t['country']}", ["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢" if language == "‡πÑ‡∏ó‡∏¢" else "Thailand", "‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤" if language == "‡πÑ‡∏ó‡∏¢" else "USA", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô" if language == "‡πÑ‡∏ó‡∏¢" else "Japan", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∑‡πà‡∏ô‡πÜ" if language == "‡πÑ‡∏ó‡∏¢" else "Other"])
    
    # Activity level selection with icons
    activity_level = st.selectbox(f"üèÉ‚Äç‚ôÄÔ∏è {t['activity_level']}", [
        ("‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô üíª" if language == "‡πÑ‡∏ó‡∏¢" else "Sedentary üíª", 1.2),
        ("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤ üö∂‚Äç‚ôÇÔ∏è" if language == "‡πÑ‡∏ó‡∏¢" else "Light Exercise üö∂‚Äç‚ôÇÔ∏è", 1.375),
        ("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á üèãÔ∏è‚Äç‚ôÄÔ∏è" if language == "‡πÑ‡∏ó‡∏¢" else "Moderate Exercise üèãÔ∏è‚Äç‚ôÄÔ∏è", 1.55),
        ("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å üèÉ‚Äç‚ôÇÔ∏è" if language == "‡πÑ‡∏ó‡∏¢" else "Heavy Exercise üèÉ‚Äç‚ôÇÔ∏è", 1.725)
    ], format_func=lambda x: x[0])

    # Submit registration with a button
    if st.button(f"üìù {t['submit']}", help=t["submit"]):
        st.session_state.user_data = {
            "weight": weight,
            "height": height,
            "age": age,
            "gender": gender,
            "country": country
        }

        # Calculate BMI
        if height > 0:
            bmi = weight / ((height / 100) ** 2)  # Convert height to meters
            st.session_state.user_data["bmi"] = bmi

            # Calculate BMR
            if gender == ("‡∏ä‡∏≤‡∏¢" if language == "‡πÑ‡∏ó‡∏¢" else "Male"):
                bmr = 10 * weight + 6.25 * height - 5 * age + 5
            else:
                bmr = 10 * weight + 6.25 * height - 5 * age - 161

            # Calculate TDEE
            tdee = bmr * activity_level[1]
            st.session_state.user_data["tdee"] = tdee

        st.success(f"üéâ {t['submit']}! {t['back']}")
        st.session_state.current_page = "home"

# Function to get calories from Excel
def get_calories(meal_name):
    try:
        # Read data from Excel file
        df = pd.read_excel('Food.xlsx')  # Change to the path of your Excel file
        # Find calories by meal name
        result = df[df['Menu'] == meal_name]  # Change '‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£' to the column name for meal names
        if not result.empty:
            return result.iloc[0]['Cal']  # Change '‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà' to the column name for calories
        else:
            return None
    except Exception as e:
        st.error(f"Error reading Excel file: {e}")
        return None

# Function to search meals by name
def search_meals(search_term):
    try:
        df = pd.read_excel('Food.xlsx')  # Change to the path of your Excel file
        # Filter meals that start with the search term
        filtered = df[df['Menu'].str.startswith(search_term, na=False)]
        return filtered
    except Exception as e:
        st.error(f"Error reading Excel file: {e}")
        return pd.DataFrame()  # Return an empty DataFrame

# Home page
def home_page():
    st.title(f"üè† {t['welcome']}")
    # User data display
    if st.session_state.user_data:
        st.subheader(f"üóÇÔ∏è {t['user_data']}")
        st.write(f"**{t['weight']}:** {st.session_state.user_data.get('weight', 0)} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°" if language == "‡πÑ‡∏ó‡∏¢" else f"{t['weight']}: {st.session_state.user_data.get('weight', 0)} kg")
        st.write(f"**{t['height']}:** {st.session_state.user_data.get('height', 0)} ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£" if language == "‡πÑ‡∏ó‡∏¢" else f"{t['height']}: {st.session_state.user_data.get('height', 0)} cm")
        st.write(f"**{t['age']}:** {st.session_state.user_data.get('age', 0)} ‡∏õ‡∏µ" if language == "‡πÑ‡∏ó‡∏¢" else f"{t['age']}: {st.session_state.user_data.get('age', 0)} years")
        st.write(f"**{t['gender']}:** {st.session_state.user_data.get('gender', 'N/A')}")
        st.write(f"**{t['country']}:** {st.session_state.user_data.get('country', 'N/A')}")
        st.write(f"**{t['bmi']}:** {st.session_state.user_data.get('bmi', 0):.2f}" if 'bmi' in st.session_state.user_data else "N/A")
        st.write(f"**{t['tdee']}:** {st.session_state.user_data.get('tdee', 0):.2f} kcal" if 'tdee' in st.session_state.user_data else "N/A")
    
    # Meal addition section
    st.subheader(f"üçΩÔ∏è {t['add_meal']}")
    meal_type = st.selectbox(f"üç¥ {t['choose_meal']}", [t['breakfast'], t['lunch'], t['dinner'], t['snack']])
    meal_date = st.date_input(f"üìÖ {t['meal_date']}", datetime.now())
    
    # Search functionality
    st.subheader(f"üîç {t['search']}")
    search_term = st.text_input(f"üîç {t['search']}")
    
    if search_term:
        search_results = search_meals(search_term)
        st.subheader(t['search_results'])
        if not search_results.empty:
            meal_name = st.selectbox(f"üìù {t['meal_name']}", options=search_results['Menu'].tolist())
            calories = get_calories(meal_name)
            st.write(f"üîç ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà: {calories} kcal")
        else:
            st.write("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô")
    
    meal_image = st.file_uploader(f"üñºÔ∏è {t['meal_image']}", type=["jpg", "png", "jpeg"])
    
    # Save meal data
    if st.button(f"üíæ {t['save_meal']}"):
        if meal_name and calories is not None:
            st.session_state.meal_data[meal_type].append({
                "date": meal_date,
                "name": meal_name,
                "calories": calories,
                "image": meal_image
            })
            st.success(f"‚úÖ {t['save_meal']} {meal_name}!")
        else:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!")
    
    # Display saved meals
    st.subheader(f"üìú {t['saved_meals']}")
    for meal_type, meals in st.session_state.meal_data.items():
        st.write(f"**{meal_type}:**")
        if meals:
            for meal in meals:
                st.write(f"üóìÔ∏è {meal['date']} - {meal['name']} - {meal['calories']} kcal")
                if meal['image'] is not None:
                    st.image(meal['image'], width=100)
        else:
            st.write(t['no_meal_data'])

# Page routing
if st.session_state.current_page == "registration":
    registration_page()
elif st.session_state.current_page == "home":
    home_page()

# ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå Excel
file_path = "Food.xlsx"  # ‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
df = pd.read_excel(file_path)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£
def calculate_total_kcal(meals):
    total_kcal = sum(meals)  # ‡∏ö‡∏ß‡∏Å‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏π
    return total_kcal  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏°‡∏∑‡πâ‡∏≠
def input_meals(meal_time, df, num_of_meals=3):
    meals = []
    for i in range(num_of_meals):
        food_name = input(f"‡∏õ‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö{meal_time} {i + 1}: ")
        food_row = df[df['Menu'].str.contains(food_name, case=False, na=False)]
        
        if not food_row.empty:
            kcal = food_row['Cal'].values[0]
            meals.append(kcal)
            print(f"{food_name} ‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ {kcal} kcal")
        else:
            print(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ '{food_name}' ‡πÉ‡∏ô‡πÄ‡∏°‡∏ô‡∏π")
    
    return meals

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤
meals_m = input_meals("‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤", df)
total_m = calculate_total_kcal(meals_m)

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á
meals_l = input_meals("‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏á", df)
total_l = calculate_total_kcal(meals_l)

# ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô
meals_n = input_meals("‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô", df)
total_n = calculate_total_kcal(meals_n)

# ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
total_kcal = total_m + total_l + total_n
print("‡∏£‡∏ß‡∏°‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", total_kcal)

