import streamlit as st
from datetime import datetime

# Set up language translations
translations = {
    "‡πÑ‡∏ó‡∏¢": {
        "title": "NAB Food Calculator App",
        "registration": "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô",
        "weight": "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)",
        "height": "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)",
        "age": "‡∏≠‡∏≤‡∏¢‡∏∏ (‡∏õ‡∏µ)",
        "gender": "‡πÄ‡∏û‡∏®",
        "country": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®",
        "language": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤",
        "activity_level": "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°",
        "submit": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "welcome": "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà!",
        "user_data": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì",
        "bmi": "‡∏Ñ‡πà‡∏≤‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)",
        "tdee": "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (TDEE)",
        "choose_meal": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "breakfast": "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤",
        "lunch": "‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô",
        "dinner": "‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô",
        "snack": "‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á",
        "add_meal": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        "meal_date": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
        "meal_name": "‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "meal_calories": "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà (‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà)",
        "meal_image": "‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "save_meal": "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "saved_meals": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ",
        "no_meal_data": "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ",
        "back": "‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å"
    },
    "English": {
        "title": "NAB Food Calculator App",
        "registration": "Registration",
        "weight": "Weight (kg)",
        "height": "Height (cm)",
        "age": "Age (years)",
        "gender": "Gender",
        "country": "Select Country",
        "language": "Select Language",
        "activity_level": "Activity Level",
        "submit": "Submit",
        "welcome": "Welcome to the Calorie Calculator App!",
        "user_data": "Your User Data",
        "bmi": "Body Mass Index (BMI)",
        "tdee": "Total Daily Energy Expenditure (TDEE)",
        "choose_meal": "Choose a Meal",
        "breakfast": "Breakfast",
        "lunch": "Lunch",
        "dinner": "Dinner",
        "snack": "Snack",
        "add_meal": "Add Meal",
        "meal_date": "Select Date",
        "meal_name": "Meal Name",
        "meal_calories": "Choose Calories (kcal)",
        "meal_image": "Upload Meal Image",
        "save_meal": "Save Meal",
        "saved_meals": "Saved Meal Data",
        "no_meal_data": "No saved meal data",
        "back": "Back to Home"
    }
}

# Select language
language = st.selectbox("üåê ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏©‡∏≤ / Select Language", ["‡πÑ‡∏ó‡∏¢", "English"])

# Use the selected language for translations
t = translations[language]

# Sidebar configuration with circular logo
st.sidebar.markdown(
    f"""
    <div style="display: flex; align-items: center;">
        <img src="https://i.imgur.com/d7m4oYk_d.webp?maxwidth=760&fidelity=grand" style="width: 60px; height: 60px; border-radius: 50%; margin-right: 10px;">
        <h2 style="margin: 0;">{t['title']}</h2>
    </div>
    """,
    unsafe_allow_html=True
)

# Dictionary to store meal data
if 'meal_data' not in st.session_state:
    st.session_state.meal_data = {
        "breakfast": [],
        "lunch": [],
        "dinner": [],
        "snack": []
    }

# User registration data
if 'user_data' not in st.session_state:
    st.session_state.user_data = {}

# Main application logic
if 'current_page' not in st.session_state:
    st.session_state.current_page = "registration"

# Function for user registration
def registration_page():
    st.title(f"üìã {t['registration']}")
    
    # Use Columns for layout
    col1, col2 = st.columns(2)
    
    with col1:
        weight = st.number_input(f"üèãÔ∏è‚Äç‚ôÇÔ∏è {t['weight']}", min_value=0.0, format="%.2f")
        height = st.number_input(f"üìè {t['height']}", min_value=0.0, format="%.2f")
        age = st.number_input(f"üë∂ {t['age']}", min_value=0, format="%d")
    
    with col2:
        gender = st.selectbox(f"üöª {t['gender']}", ["‡∏ä‡∏≤‡∏¢" if language == "‡πÑ‡∏ó‡∏¢" else "Male", "‡∏´‡∏ç‡∏¥‡∏á" if language == "‡πÑ‡∏ó‡∏¢" else "Female"])
        country = st.selectbox(f"üåç {t['country']}", ["‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢" if language == "‡πÑ‡∏ó‡∏¢" else "Thailand", "‡∏™‡∏´‡∏£‡∏±‡∏ê‡∏≠‡πÄ‡∏°‡∏£‡∏¥‡∏Å‡∏≤" if language == "‡πÑ‡∏ó‡∏¢" else "USA", "‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô" if language == "‡πÑ‡∏ó‡∏¢" else "Japan", "‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡∏≠‡∏∑‡πà‡∏ô‡πÜ" if language == "‡πÑ‡∏ó‡∏¢" else "Other"])
    
    # Activity level selection with icons
    activity_level = st.selectbox(f"üèÉ‚Äç‚ôÄÔ∏è {t['activity_level']}", [
        ("‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô üíª" if language == "‡πÑ‡∏ó‡∏¢" else "Sedentary üíª", 1.2),
        ("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏ö‡∏≤ üö∂‚Äç‚ôÇÔ∏è" if language == "‡πÑ‡∏ó‡∏¢" else "Light Exercise üö∂‚Äç‚ôÇÔ∏è", 1.375),
        ("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á üèãÔ∏è‚Äç‚ôÄÔ∏è" if language == "‡πÑ‡∏ó‡∏¢" else "Moderate Exercise üèãÔ∏è‚Äç‚ôÄÔ∏è", 1.55),
        ("‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏´‡∏ô‡∏±‡∏Å üèÉ‚Äç‚ôÇÔ∏è" if language == "‡πÑ‡∏ó‡∏¢" else "Heavy Exercise üèÉ‚Äç‚ôÇÔ∏è", 1.725)
    ], format_func=lambda x: x[0])

    # Submit registration with a button
    if st.button(f"üìù {t['submit']}", help=t["submit"]):
        st.session_state.user_data = {
            "weight": weight,
            "height": height,
            "age": age,
            "gender": gender,
            "country": country
        }

        # Calculate BMI
        if height > 0:
            bmi = weight / ((height / 100) ** 2)  # Convert height to meters
            st.session_state.user_data["bmi"] = bmi

            # Calculate BMR
            if gender == ("‡∏ä‡∏≤‡∏¢" if language == "‡πÑ‡∏ó‡∏¢" else "Male"):
                bmr = 10 * weight + 6.25 * height - 5 * age + 5
            else:
                bmr = 10 * weight + 6.25 * height - 5 * age - 161

            # Calculate TDEE
            tdee = bmr * activity_level[1]
            st.session_state.user_data["tdee"] = tdee

        st.success(f"üéâ {t['submit']}! {t['back']}")
        st.session_state.current_page = "home"

# Function to display the home page
def home_page():
    st.title(f"üè† {t['title']}")
    st.write(f"{t['welcome']} üòÉ")
    
    # Display user data with an expander
    with st.expander(f"üìä {t['user_data']}"):
        st.write(f"**{t['weight']}:** {st.session_state.user_data.get('weight', 0)} ‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°" if language == "‡πÑ‡∏ó‡∏¢" else "kg")
        st.write(f"**{t['height']}:** {st.session_state.user_data.get('height', 0)} ‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£" if language == "‡πÑ‡∏ó‡∏¢" else "cm")
        st.write(f"**{t['age']}:** {st.session_state.user_data.get('age', 0)} ‡∏õ‡∏µ" if language == "‡πÑ‡∏ó‡∏¢" else "years")
        st.write(f"**{t['country']}:** {st.session_state.user_data.get('country', '')}")
    
        # Display BMI and TDEE
        if "bmi" in st.session_state.user_data:
            st.metric(f"üìè {t['bmi']}", f"{st.session_state.user_data['bmi']:.2f}")
        if "tdee" in st.session_state.user_data:
            st.metric(f"üî• {t['tdee']}", f"{st.session_state.user_data['tdee']:.2f} ‡∏Å‡∏¥‡πÇ‡∏•‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà")

    # Create buttons with icons
    st.markdown(f"## üçΩÔ∏è {t['choose_meal']}")
    if st.button(f"üç≥ {t['breakfast']}"):
        st.session_state.current_page = "breakfast"
    if st.button(f"üç≤ {t['lunch']}"):
        st.session_state.current_page = "lunch"
    if st.button(f"üçõ {t['dinner']}"):
        st.session_state.current_page = "dinner"
    if st.button(f"üç™ {t['snack']}"):
        st.session_state.current_page = "snack"

# Function to display the add meal page
def add_meal_page(meal_type):
    st.title(f"üçΩÔ∏è {t['add_meal']}")
    meal_date = st.date_input(f"üìÖ {t['meal_date']}", datetime.now())
    meal_name = st.text_input(f"üç¥ {t['meal_name']}")
    meal_calories = st.slider(f"üî¢ {t['meal_calories']}", 0, 2000, 100)
    meal_image = st.file_uploader(f"üñºÔ∏è {t['meal_image']}")

    if st.button(f"üíæ {t['save_meal']}"):
        # Save meal data
        st.session_state.meal_data[meal_type].append({
            "date": meal_date,
            "name": meal_name,
            "calories": meal_calories,
            "description": meal_description,
            "image": meal_image
        })
        st.success(f"‚úÖ {t['save_meal']}")
        st.session_state.current_page = "home"

# Routing pages based on current page state
if st.session_state.current_page == "registration":
    registration_page()
elif st.session_state.current_page == "home":
    home_page()
elif st.session_state.current_page in ["breakfast", "lunch", "dinner", "snack"]:
    add_meal_page(st.session_state.current_page)
